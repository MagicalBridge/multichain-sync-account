// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: protobuf/dapplink-wallet.proto

package dal_wallet_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScanChain_SignUpScanService_FullMethodName = "/syncs.ScanChain/SignUpScanService"
	ScanChain_SetScanAddress_FullMethodName    = "/syncs.ScanChain/SetScanAddress"
	ScanChain_RefreshCache_FullMethodName      = "/syncs.ScanChain/RefreshCache"
	ScanChain_SetTokenAddress_FullMethodName   = "/syncs.ScanChain/SetTokenAddress"
)

// ScanChainClient is the client API for ScanChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScanChainClient interface {
	// 注册扫链服务
	SignUpScanService(ctx context.Context, in *SignUpScanServiceRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error)
	// 设置扫链地址
	SetScanAddress(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetScanAddressRequest, BoilerplateResponse], error)
	// 刷新缓存
	RefreshCache(ctx context.Context, in *RefreshCacheRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error)
	// 设置代币地址
	SetTokenAddress(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetTokenAddressRequest, BoilerplateResponse], error)
}

type scanChainClient struct {
	cc grpc.ClientConnInterface
}

func NewScanChainClient(cc grpc.ClientConnInterface) ScanChainClient {
	return &scanChainClient{cc}
}

func (c *scanChainClient) SignUpScanService(ctx context.Context, in *SignUpScanServiceRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoilerplateResponse)
	err := c.cc.Invoke(ctx, ScanChain_SignUpScanService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanChainClient) SetScanAddress(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetScanAddressRequest, BoilerplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScanChain_ServiceDesc.Streams[0], ScanChain_SetScanAddress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetScanAddressRequest, BoilerplateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScanChain_SetScanAddressClient = grpc.ClientStreamingClient[SetScanAddressRequest, BoilerplateResponse]

func (c *scanChainClient) RefreshCache(ctx context.Context, in *RefreshCacheRequest, opts ...grpc.CallOption) (*BoilerplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoilerplateResponse)
	err := c.cc.Invoke(ctx, ScanChain_RefreshCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanChainClient) SetTokenAddress(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetTokenAddressRequest, BoilerplateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScanChain_ServiceDesc.Streams[1], ScanChain_SetTokenAddress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetTokenAddressRequest, BoilerplateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScanChain_SetTokenAddressClient = grpc.ClientStreamingClient[SetTokenAddressRequest, BoilerplateResponse]

// ScanChainServer is the server API for ScanChain service.
// All implementations should embed UnimplementedScanChainServer
// for forward compatibility.
type ScanChainServer interface {
	// 注册扫链服务
	SignUpScanService(context.Context, *SignUpScanServiceRequest) (*BoilerplateResponse, error)
	// 设置扫链地址
	SetScanAddress(grpc.ClientStreamingServer[SetScanAddressRequest, BoilerplateResponse]) error
	// 刷新缓存
	RefreshCache(context.Context, *RefreshCacheRequest) (*BoilerplateResponse, error)
	// 设置代币地址
	SetTokenAddress(grpc.ClientStreamingServer[SetTokenAddressRequest, BoilerplateResponse]) error
}

// UnimplementedScanChainServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScanChainServer struct{}

func (UnimplementedScanChainServer) SignUpScanService(context.Context, *SignUpScanServiceRequest) (*BoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpScanService not implemented")
}
func (UnimplementedScanChainServer) SetScanAddress(grpc.ClientStreamingServer[SetScanAddressRequest, BoilerplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetScanAddress not implemented")
}
func (UnimplementedScanChainServer) RefreshCache(context.Context, *RefreshCacheRequest) (*BoilerplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshCache not implemented")
}
func (UnimplementedScanChainServer) SetTokenAddress(grpc.ClientStreamingServer[SetTokenAddressRequest, BoilerplateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetTokenAddress not implemented")
}
func (UnimplementedScanChainServer) testEmbeddedByValue() {}

// UnsafeScanChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScanChainServer will
// result in compilation errors.
type UnsafeScanChainServer interface {
	mustEmbedUnimplementedScanChainServer()
}

func RegisterScanChainServer(s grpc.ServiceRegistrar, srv ScanChainServer) {
	// If the following call pancis, it indicates UnimplementedScanChainServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScanChain_ServiceDesc, srv)
}

func _ScanChain_SignUpScanService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpScanServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanChainServer).SignUpScanService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScanChain_SignUpScanService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanChainServer).SignUpScanService(ctx, req.(*SignUpScanServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanChain_SetScanAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScanChainServer).SetScanAddress(&grpc.GenericServerStream[SetScanAddressRequest, BoilerplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScanChain_SetScanAddressServer = grpc.ClientStreamingServer[SetScanAddressRequest, BoilerplateResponse]

func _ScanChain_RefreshCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanChainServer).RefreshCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScanChain_RefreshCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanChainServer).RefreshCache(ctx, req.(*RefreshCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanChain_SetTokenAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScanChainServer).SetTokenAddress(&grpc.GenericServerStream[SetTokenAddressRequest, BoilerplateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScanChain_SetTokenAddressServer = grpc.ClientStreamingServer[SetTokenAddressRequest, BoilerplateResponse]

// ScanChain_ServiceDesc is the grpc.ServiceDesc for ScanChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScanChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncs.ScanChain",
	HandlerType: (*ScanChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUpScanService",
			Handler:    _ScanChain_SignUpScanService_Handler,
		},
		{
			MethodName: "RefreshCache",
			Handler:    _ScanChain_RefreshCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetScanAddress",
			Handler:       _ScanChain_SetScanAddress_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTokenAddress",
			Handler:       _ScanChain_SetTokenAddress_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/dapplink-wallet.proto",
}
